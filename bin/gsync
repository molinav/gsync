#!/usr/bin/env python

# Copyright (C) 2013 Craig Phillips.  All rights reserved.

"""GSync - RSync for Google Drive"""
from __future__ import print_function

import os
import sys
import logging

try:
    import coverage
    coverage.process_startup()
except ImportError:
    pass

import libgsync.drive
from libgsync.options import GsyncOptions
from libgsync.output import verbose, debug, critical
from libgsync.crawler import Crawler
from libgsync.filter import Filter


def authenticate():
    """Performs authentications and exits"""

    with libgsync.drive.Drive().service():
        verbose("Authenticated")
        return 0

    sys.stderr.write("Error: Failed to authenticate\n")
    return 1


def main():
    """Main entry point for GSync"""

    if GsyncOptions.verbose:
        verbose.enable()

    if GsyncOptions.debug:
        debug.enable()

    if (not GsyncOptions.super and os.getuid() != 0
            and (GsyncOptions.owner or GsyncOptions.group)):

        print("Warning: Not running as root, file ownership may be ignored")

    logging.basicConfig()
    paths = GsyncOptions.list().source_paths
    dest = GsyncOptions.destination_path

    debug(GsyncOptions.options)

    if GsyncOptions.authenticate:
        return authenticate()

    try:
        if GsyncOptions.filter is not None:
            Filter.add_rules(GsyncOptions.list().filter)

        if GsyncOptions.include_from is not None:
            Filter.load_rules(GsyncOptions.list().include_from, "+")

        if GsyncOptions.include is not None:
            Filter.add_rules(GsyncOptions.list().include, "+")

        if GsyncOptions.exclude_from is not None:
            Filter.load_rules(GsyncOptions.list().exclude_from, "-")

        if GsyncOptions.exclude is not None:
            Filter.add_rules(GsyncOptions.list().exclude, "-")

        # If there are multiple source paths, the destination is always a
        # directory if a name is supplied.  Otherwise, the destination is
        # a directory if the source is also a directory, or it is a file if
        # the destination does not exist or is already an existing file.
        if len(paths) > 1:
            debug("Multiple source files, destination cannot be a file")
            GsyncOptions.force_dest_file = False

        for src in paths:
            debug("Creating crawler for: %s" % repr(src))
            Crawler(src, dest).run()

    except BaseException as ex:
        debug.exception(ex)
        critical(ex)
        return 1

    debug("Crawlers finished, exiting")
    return 0


if __name__ == "__main__":
    sys.exit(main())
